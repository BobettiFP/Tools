# -*- coding: utf-8 -*-
"""NetworkXtoMermaid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yjsPL3BeQEeCNY04VVSholu0TWFABxCj
"""

#given a networkx graph in the following format:

# prompt: Another sample networkx graph with a node type attribute

import networkx as nx

def create_graph_with_node_type(edges, node_types):
    """
    Creates a NetworkX graph with a 'type' attribute for each node.

    Args:
        edges: A list of tuples representing the edges in the graph. Each tuple should
               contain two node IDs.
        node_types: A dictionary where keys are node IDs and values are their types.

    Returns:
        A NetworkX graph object.
    """

    graph = nx.Graph()
    for u, v in edges:
        graph.add_edge(u, v)

    for node, node_type in node_types.items():
        graph.nodes[node]['type'] = node_type

    return graph

# Example usage
edges = [(1, 2), (2, 3), (3, 1), (4, 5)]
node_types = {1: 'A', 2: 'B', 3: 'A', 4: 'C', 5: 'C'}

graph = create_graph_with_node_type(edges, node_types)


# Print node attributes to verify
for node, data in graph.nodes(data=True):
  print(f"Node {node}: {data}")

# You can further process or analyze the graph using NetworkX functions
# e.g., calculate degree centrality
# degree_centrality = nx.degree_centrality(graph)
# print(degree_centrality)

def networkx_to_mm(G, net_type = "dir"):
  if net_type == "dir":
    dir = "--->"
  elif net_type == "undir":
    dir = "<--->"
  else:
    raise ValueError("net_type must be Directed or Undirected")
  nodes = G.nodes()
  edges = G.edges()
  mermaid_diagram = "graph TD\n"
  for k,v in nodes.items():
    mermaid_diagram+=("  "+str(k).replace(" ","")+':::'+str(v['type'])+'\n')
  for i, j in edges:
    mermaid_diagram+=("  "+str(i).replace(" ","")+"['"+str(i)+"']"+dir+str(j).replace(" ","")+"['"+str(j)+"']\n")
  return mermaid_diagram

import base64
from IPython.display import Image, display
import matplotlib.pyplot as plt
def mm(graph):
    graphbytes = graph.encode("utf8")
    base64_bytes = base64.urlsafe_b64encode(graphbytes)
    base64_string = base64_bytes.decode("ascii")
    display(Image(url="https://mermaid.ink/img/" + base64_string))

print(networkx_to_mm(graph, net_type="undir"))

mm(networkx_to_mm(graph, net_type="dir"))

mm(networkx_to_mm(graph, net_type="undir"))

mm(networkx_to_mm(graph))

#harder example
nodes_2020 = {
    # Start/End
    'Customer': {'type': 'start', 'layer': 0},
    'Authentication Complete': {'type': 'term', 'layer': 16},

    # Frontend access points
    'Visit bank branch': {'type': 'human', 'layer': 1},
    'Open mobile app': {'type': 'frontend', 'layer': 1},
    'Access web portal': {'type': 'frontend', 'layer': 1},
    'Use ATM': {'type': 'frontend', 'layer': 1},
    'Call banking center': {'type': 'mechanical', 'layer': 1},

    # Initial steps
    'Take queue number': {'type': 'human', 'layer': 2},
    'Launch app': {'type': 'frontend', 'layer': 2},
    'Load secure webpage': {'type': 'frontend', 'layer': 2},
    'Insert card': {'type': 'mechanical', 'layer': 2},
    'Connect to agent': {'type': 'mechanical', 'layer': 2},

    # ATM interaction
    'ATM Card Detection': {'type': 'mechanical', 'layer': 3},
    'ATM Menu Display': {'type': 'frontend', 'layer': 4},

    # Device security checks (mobile)
    'App Integrity Check': {'type': 'backend', 'layer': 3},
    'OS Version Check': {'type': 'backend', 'layer': 3},
    'Root/Jailbreak Check': {'type': 'backend', 'layer': 3},
    'Register Device': {'type': 'backend', 'layer': 3},
    'Generate Device Token': {'type': 'backend', 'layer': 4},

    # Authentication methods
    'Present ID to teller': {'type': 'human', 'layer': 5},
    'Choose login method': {'type': 'frontend', 'layer': 5},
    'Enter PIN': {'type': 'frontend', 'layer': 5},
    'Provide personal information': {'type': 'mechanical', 'layer': 5},
    'Answer security questions': {'type': 'mechanical', 'layer': 6},
    'Verify voice pattern': {'type': 'ai', 'layer': 7},
    'Verify face with ID': {'type': 'human', 'layer': 6},
    'Enter Bank ID/PW': {'type': 'frontend', 'layer': 6},
    'Use Public Certificate': {'type': 'frontend', 'layer': 6},
    'Verify Resident Registration Number': {'type': 'frontend', 'layer': 6},
    'Use biometric authentication': {'type': 'frontend', 'layer': 6},
    'Use simple PIN': {'type': 'frontend', 'layer': 6},
    'Verify PIN': {'type': 'backend', 'layer': 6},

    # Additional verification steps
    'Verify OTP': {'type': 'backend', 'layer': 7},
    'Send SMS Code': {'type': 'backend', 'layer': 7},
    'Verify SMS Code': {'type': 'backend', 'layer': 8},

    # Security infrastructure
    'Load Balancer': {'type': 'backend', 'layer': 8},
    'Web Application Firewall': {'type': 'backend', 'layer': 8},
    'TLS Handshake': {'type': 'backend', 'layer': 9},
    'Initialize Session': {'type': 'backend', 'layer': 9},
    'Credential Encryption': {'type': 'backend', 'layer': 10},
    'Hash Verification': {'type': 'backend', 'layer': 10},
    'Token Generation': {'type': 'backend', 'layer': 10},
    'MFA Service': {'type': 'backend', 'layer': 11},
    'Biometric Processor': {'type': 'backend', 'layer': 11},
    'PKI Certificate Service': {'type': 'backend', 'layer': 11},
}
edges_2020 = [
    #
    # 1) Customer entry points
    #
    ('Customer', 'Visit bank branch'),
    ('Customer', 'Open mobile app'),
    ('Customer', 'Access web portal'),
    ('Customer', 'Use ATM'),
    ('Customer', 'Call banking center'),

    #
    # 2) Mobile app flow
    #
    ('Open mobile app', 'Launch app'),
    ('Launch app', 'App Integrity Check'),
    ('App Integrity Check', 'OS Version Check'),
    ('OS Version Check', 'Root/Jailbreak Check'),
    ('Root/Jailbreak Check', 'Register Device'),
    ('Register Device', 'Generate Device Token'),
    ('Generate Device Token', 'Choose login method'),

    #
    # 3) Web portal flow
    #
    ('Access web portal', 'Load secure webpage'),
    ('Load secure webpage', 'Choose login method'),

    #
    # 4) Branch (teller) flow
    #
    ('Visit bank branch', 'Take queue number'),
    ('Take queue number', 'Present ID to teller'),
    ('Present ID to teller', 'Verify face with ID'),
    # Teller completes if face matches:
    ('Verify face with ID', 'Authentication Complete'),

    #
    # 5) ATM flow
    #
    ('Use ATM', 'Insert card'),
    ('Insert card', 'ATM Card Detection'),
    ('ATM Card Detection', 'ATM Menu Display'),
    ('ATM Menu Display', 'Enter PIN'),
    ('Enter PIN', 'Verify PIN'),
    # After PIN verification, proceed to backend token generation + MFA
    ('Verify PIN', 'Token Generation'),

    #
    # 6) Call center flow
    #
    ('Call banking center', 'Connect to agent'),
    ('Connect to agent', 'Provide personal information'),
    ('Provide personal information', 'Answer security questions'),
    ('Answer security questions', 'Verify voice pattern'),
    # Voice pattern leads to backend token generation + MFA
    ('Verify voice pattern', 'Token Generation'),

    #
    # 7) User chooses how to log in
    #
    ('Choose login method', 'Enter Bank ID/PW'),
    ('Choose login method', 'Use Public Certificate'),
    ('Choose login method', 'Verify Resident Registration Number'),
    ('Choose login method', 'Use biometric authentication'),
    ('Choose login method', 'Use simple PIN'),

    #
    # 8) Sub-method flows
    #
    # a) Bank ID/PW, RRN, or simple PIN -> Load Balancer
    ('Enter Bank ID/PW', 'Load Balancer'),
    ('Verify Resident Registration Number', 'Load Balancer'),
    ('Use simple PIN', 'Load Balancer'),

    # b) Public Certificate -> PKI Certificate Service -> Load Balancer
    ('Use Public Certificate', 'PKI Certificate Service'),
    ('PKI Certificate Service', 'Load Balancer'),

    # c) Biometric authentication -> Biometric Processor -> MFA Service
    ('Use biometric authentication', 'Biometric Processor'),
    ('Biometric Processor', 'MFA Service'),

    #
    # 9) Security layers (Load Balancer chain)
    #
    ('Load Balancer', 'Web Application Firewall'),
    ('Web Application Firewall', 'TLS Handshake'),
    ('TLS Handshake', 'Initialize Session'),
    ('Initialize Session', 'Credential Encryption'),
    ('Credential Encryption', 'Hash Verification'),
    ('Hash Verification', 'Token Generation'),

    #
    # 10) Token Generation -> MFA
    #
    ('Token Generation', 'MFA Service'),
    ('MFA Service', 'Send SMS Code'),
    ('Send SMS Code', 'Verify SMS Code'),
    ('Verify SMS Code', 'Verify OTP'),
    ('Verify OTP', 'Authentication Complete'),
]
def create_network(nodes, edges):
  G = nx.DiGraph()
  for node, attrs in nodes.items():
    G.add_node(node, **attrs)
    # Add edges to graph
  G.add_edges_from(edges)
  return G
mm(networkx_to_mm(create_network(nodes_2020, edges_2020)))